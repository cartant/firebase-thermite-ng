export const external = [
    "@angular/core",
    "@angular/core/testing",
    "@angular/platform-browser-dynamic",
    "@angular/platform-browser-dynamic/testing",
    "firebase/app",
    "firebase/auth",
    "firebase/database",
    "firebase/messaging",
    "firebase/storage",
    "firebase-nightlight",
    "firebase-thermite",
    "firebase-thermite/app",
    "firebase-thermite/auth",
    "firebase-thermite/database",
    "firebase-thermite/messaging",
    "firebase-thermite/storage",
    "rxjs/add/observable/defer",
    "rxjs/add/observable/fromPromise",
    "rxjs/add/observable/merge",
    "rxjs/add/observable/of",
    "rxjs/add/observable/zip",
    "rxjs/add/operator/concatMap",
    "rxjs/add/operator/do",
    "rxjs/add/operator/filter",
    "rxjs/add/operator/first",
    "rxjs/add/operator/map",
    "rxjs/add/operator/mergeMap",
    "rxjs/add/operator/observeOn",
    "rxjs/add/operator/scan",
    "rxjs/add/operator/share",
    "rxjs/add/operator/skip",
    "rxjs/add/operator/startWith",
    "rxjs/add/operator/take",
    "rxjs/add/operator/takeUntil",
    "rxjs/add/operator/takeWhile",
    "rxjs/add/operator/toArray",
    "rxjs/add/operator/toPromise",
    "rxjs/Observable",
    "rxjs/observable/fromPromise",
    "rxjs/scheduler/async",
    "rxjs/Subject",
    "tslib"
];

export const globals = {
    "@angular/core": "ng.core",
    "@angular/core/testing": "ng.core.testing",
    "@angular/platform-browser-dynamic": "ng.platformBrowserDynamic",
    "@angular/platform-browser-dynamic/testing": "ng.platformBrowserDynamic.testing",
    "firebase/app": "firebase",
    "firebase-nightlight": "firebaseNightlight",
    "firebase-thermite": "firebaseThermite",
    "firebase-thermite/app": "firebaseThermite",
    "firebase-thermite/auth": "firebaseThermite",
    "firebase-thermite/database": "firebaseThermite",
    "firebase-thermite/messaging": "firebaseThermite",
    "firebase-thermite/storage": "firebaseThermite",
    "rxjs/Observable": "Rx",
    "rxjs/observable/fromPromise": "Rx.Observable",
    "rxjs/scheduler/async": "Rx.Scheduler",
    "rxjs/Subject": "Rx",
    "tslib": "window"
};
